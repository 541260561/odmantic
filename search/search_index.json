{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Defining a model from odmantic import Model class Person ( Model ): first_name : str last_name : str Creating an instance person_instance = Person ( first_name = \"Robert\" , last_name = \"Miles\" ) print ( person_instance ) #> Person(first_name=\"Robert\", last_name=\"Miles\") print ( person_instance . first_name ) #> Robert print ( person_instance . last_name ) #> Miles Saving a created instance Creating a session AsyncIO from motor.motor_asyncio import AsyncIOMotorClient from odmantic import AIOEngine client = AsyncIOMotorClient ( \"mongodb://localhost:27017/\" ) engine = AIOEngine ( motor_client = client , db_name = \"example_db\" ) Sync Persisting an instance AsyncIO await engine . add ( person_instance ) Sync engine . add ( person_instance ) Querying instances AsyncIO freddies = await engine . find ( Person , Person . first_name == \"Freddie\" ) for fred in freddies : print ( fred ) #> Person(first_name=\"Freddie\", last_name=\"Mercury\") #> Person(first_name=\"Freddie\", last_name=\"Highmore\") Sync freddies = engine . find ( Person , Person . first_name == \"Freddie\" ) for fred in freddies : print ( fred ) #> Person(first_name=\"Freddie\", last_name=\"Mercury\") #> Person(first_name=\"Freddie\", last_name=\"Highmore\")","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#defining-a-model","text":"from odmantic import Model class Person ( Model ): first_name : str last_name : str","title":"Defining a model"},{"location":"#creating-an-instance","text":"person_instance = Person ( first_name = \"Robert\" , last_name = \"Miles\" ) print ( person_instance ) #> Person(first_name=\"Robert\", last_name=\"Miles\") print ( person_instance . first_name ) #> Robert print ( person_instance . last_name ) #> Miles","title":"Creating an instance"},{"location":"#saving-a-created-instance","text":"","title":"Saving a created instance"},{"location":"#creating-a-session","text":"AsyncIO from motor.motor_asyncio import AsyncIOMotorClient from odmantic import AIOEngine client = AsyncIOMotorClient ( \"mongodb://localhost:27017/\" ) engine = AIOEngine ( motor_client = client , db_name = \"example_db\" ) Sync","title":"Creating a session"},{"location":"#persisting-an-instance","text":"AsyncIO await engine . add ( person_instance ) Sync engine . add ( person_instance )","title":"Persisting an instance"},{"location":"#querying-instances","text":"AsyncIO freddies = await engine . find ( Person , Person . first_name == \"Freddie\" ) for fred in freddies : print ( fred ) #> Person(first_name=\"Freddie\", last_name=\"Mercury\") #> Person(first_name=\"Freddie\", last_name=\"Highmore\") Sync freddies = engine . find ( Person , Person . first_name == \"Freddie\" ) for fred in freddies : print ( fred ) #> Person(first_name=\"Freddie\", last_name=\"Mercury\") #> Person(first_name=\"Freddie\", last_name=\"Highmore\")","title":"Querying instances"},{"location":"fields/","text":"Fields Providing default values class Player ( Model ): name : str level : int = 0 p = Player ( name = \"Zerator\" ) print ( p ) #> Player(name=\"Zerator\", level=0) Note For typing.Optional fields, None is already set to the default value Customize Mongo document naming class Player ( Model ): name : str = field ( mongo_name = \"nickname\" ) engine . save ( Player ( name = \"Jack\" )) Resulting document: { \"_id\" : ObjectId( \"5ed50fcad11d1975aa3d7a28\" ) , # See the next section for more details \"nickname\" : \"Jack\" , } Tip You can combine default values and custom field name by using the default keyword argument when building the field class Player ( Model ): name : str level : int = field ( default = 0 , mongo_name = \"lvl\" ) Primary key definition Implicit If not explicitly declared, an id primary key will be added to each model (corresponding to the _id key in Mongo documents). This key will be populated when the instances are saved or fetched. class Player ( Model ): name : str leeroy = Player ( name = \"Leeroy Jenkins\" ) engine . save ( leeroy ) print ( leeroy ) #> Player(id=ObjectId('5ed50fcad11d1975aa3d7a28'), name=\"Leeroy Jenkins\") Explicit If you want to use a field as the primary key Warning The Mongo name of the primary key field will be enforced to _id class Player ( Model ): name : str = field ( primary_key = True ) leeroy = Player ( name = \"Leeroy Jenkins\" ) engine . save ( leeroy ) print ( leeroy ) #> Player(name=\"Leeroy Jenkins\") Resulting document: { \"_id\" : \"Leeroy Jenkins\" }","title":"Fields"},{"location":"fields/#fields","text":"","title":"Fields"},{"location":"fields/#providing-default-values","text":"class Player ( Model ): name : str level : int = 0 p = Player ( name = \"Zerator\" ) print ( p ) #> Player(name=\"Zerator\", level=0) Note For typing.Optional fields, None is already set to the default value","title":"Providing default values"},{"location":"fields/#customize-mongo-document-naming","text":"class Player ( Model ): name : str = field ( mongo_name = \"nickname\" ) engine . save ( Player ( name = \"Jack\" )) Resulting document: { \"_id\" : ObjectId( \"5ed50fcad11d1975aa3d7a28\" ) , # See the next section for more details \"nickname\" : \"Jack\" , } Tip You can combine default values and custom field name by using the default keyword argument when building the field class Player ( Model ): name : str level : int = field ( default = 0 , mongo_name = \"lvl\" )","title":"Customize Mongo document naming"},{"location":"fields/#primary-key-definition","text":"","title":"Primary key definition"},{"location":"fields/#implicit","text":"If not explicitly declared, an id primary key will be added to each model (corresponding to the _id key in Mongo documents). This key will be populated when the instances are saved or fetched. class Player ( Model ): name : str leeroy = Player ( name = \"Leeroy Jenkins\" ) engine . save ( leeroy ) print ( leeroy ) #> Player(id=ObjectId('5ed50fcad11d1975aa3d7a28'), name=\"Leeroy Jenkins\")","title":"Implicit"},{"location":"fields/#explicit","text":"If you want to use a field as the primary key Warning The Mongo name of the primary key field will be enforced to _id class Player ( Model ): name : str = field ( primary_key = True ) leeroy = Player ( name = \"Leeroy Jenkins\" ) engine . save ( leeroy ) print ( leeroy ) #> Player(name=\"Leeroy Jenkins\") Resulting document: { \"_id\" : \"Leeroy Jenkins\" }","title":"Explicit"},{"location":"modeling/","text":"Modeling Relations ? Embedded Models One to One relationships class Publisher ( EmbeddedModel ): name : str founded : int location : str class Book ( Model ): title : str pages : int publisher : Publisher book = Book ( title = \"MongoDB: The Definitive Guide\" , pages = 216 , publisher = Publisher ( name = \"O'Reilly Media\" , founded = 1980 , location = \"CA\" ), ) await engine . add ( book ) Tip It is possible to build a define query filters on embedded documents book_from_CA = await engine . find_one ( Book , Book . publisher . location == \"CA\" ) print ( book_from_CA ) #> Book(title=\"MongoDB: The Definitive Guide\", pages=216, publisher=Publisher, name=\"O'Reilly Media\", founded=1980, location=\"CA\")) One to Many relationships class Address ( EmbeddedModel ): street : str city : str state : str zip : str class Patron ( Model ): name : str addresses : List [ Address ] Note To add conditions on the number of embedded elements, it's possible to pass extra arguments during the Embedded Field definition (TODO). Another possibility is to use the typing.Tuple type. Referenced Models class Publisher ( Model ): name : str founded : int location : str class Book ( Model ): title : str pages : int publisher : Publisher = Reference ()","title":"Modeling"},{"location":"modeling/#modeling","text":"","title":"Modeling"},{"location":"modeling/#relations","text":"","title":"Relations ?"},{"location":"modeling/#embedded-models","text":"","title":"Embedded Models"},{"location":"modeling/#one-to-one-relationships","text":"class Publisher ( EmbeddedModel ): name : str founded : int location : str class Book ( Model ): title : str pages : int publisher : Publisher book = Book ( title = \"MongoDB: The Definitive Guide\" , pages = 216 , publisher = Publisher ( name = \"O'Reilly Media\" , founded = 1980 , location = \"CA\" ), ) await engine . add ( book ) Tip It is possible to build a define query filters on embedded documents book_from_CA = await engine . find_one ( Book , Book . publisher . location == \"CA\" ) print ( book_from_CA ) #> Book(title=\"MongoDB: The Definitive Guide\", pages=216, publisher=Publisher, name=\"O'Reilly Media\", founded=1980, location=\"CA\"))","title":"One to One relationships"},{"location":"modeling/#one-to-many-relationships","text":"class Address ( EmbeddedModel ): street : str city : str state : str zip : str class Patron ( Model ): name : str addresses : List [ Address ] Note To add conditions on the number of embedded elements, it's possible to pass extra arguments during the Embedded Field definition (TODO). Another possibility is to use the typing.Tuple type.","title":"One to Many relationships"},{"location":"modeling/#referenced-models","text":"class Publisher ( Model ): name : str founded : int location : str class Book ( Model ): title : str pages : int publisher : Publisher = Reference ()","title":"Referenced Models"},{"location":"types/","text":"Data types Supported BSON types Int64 (long) ObjectId (objectId) Decimal128 (decimal) Additionnaly, most of the types supported by pydantic are supported. See pydantic: Field Types for more details. Unsupported types typing.Set / set Python to BSON type mapping Python type BSON type Comment bson.ObjectId objectId bool bool int int value between -2^31 and 2^31 - 1 int long value not between -2^31 and 2^31 - 1 bson.int64.Int64 long float double bson.decimal128.Decimal128 decimal decimal.Decimal is not supported yet str string typing.Pattern regex bytes binData bson.binary.Binary binData datetime.datetime date microseconds are truncated, only naive datetimes are allowed typing.Dict object typing.List array typing.Sequence array typing.Tuple[T, ...] array","title":"Data types"},{"location":"types/#data-types","text":"","title":"Data types"},{"location":"types/#supported-bson-types","text":"Int64 (long) ObjectId (objectId) Decimal128 (decimal) Additionnaly, most of the types supported by pydantic are supported. See pydantic: Field Types for more details.","title":"Supported BSON types"},{"location":"types/#unsupported-types","text":"typing.Set / set","title":"Unsupported types"},{"location":"types/#python-to-bson-type-mapping","text":"Python type BSON type Comment bson.ObjectId objectId bool bool int int value between -2^31 and 2^31 - 1 int long value not between -2^31 and 2^31 - 1 bson.int64.Int64 long float double bson.decimal128.Decimal128 decimal decimal.Decimal is not supported yet str string typing.Pattern regex bytes binData bson.binary.Binary binData datetime.datetime date microseconds are truncated, only naive datetimes are allowed typing.Dict object typing.List array typing.Sequence array typing.Tuple[T, ...] array","title":"Python to BSON type mapping"}]}